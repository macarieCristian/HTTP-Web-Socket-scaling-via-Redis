global
    maxconn 6144

defaults
    mode http

    #   Each server is used in turns, according to their weights.
    balance roundrobin
    
    option redispatch
    option forwardfor

    timeout connect 1000s
    timeout queue 1000s
    timeout client 1000s
    timeout server 1000s

frontend http
    bind *:3000
    default_backend servers
    
    # Any URL beginning with socket.io will be flagged as 'is_websocket'
    acl is_websocket path_beg /socket.io
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_websocket hdr_beg(Host) -i ws
    
    # The connection to use if 'is_websocket' is flagged
    use_backend websockets if is_websocket

    # Enable statistics
    stats enable
    stats hide-version 
    stats realm   Haproxy\ Statistics

    # http://localhost:3000/haproxy?stats
    stats uri /haproxy?stats
    stats auth macarc:password1

backend servers
    server server1 rest-api1:3000
    server server2 rest-api2:3000
    server server3 rest-api3:3000

backend websockets
    # The source IP address is hashed and divided by the total
    #           weight of the running servers to designate which server will
    #           receive the request. This ensures that the same client IP
    #           address will always reach the same server as long as no
    #           server goes down or up.
    balance source
    
    option http-server-close
    option forceclose
    server ws-server1 rest-api1:3000 weight 1 maxconn 1024 check
    server ws-server2 rest-api2:3000 weight 1 maxconn 1024 check
    server ws-server3 rest-api3:3000 weight 1 maxconn 1024 check
